<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\TelegramNotification;

class TelegramNotificationService
{
    /**
     * Send a message to a Telegram chat.
     *
     * @param string $message The message to send
     * @param string|null $chatId The chat ID to send the message to (defaults to admin chat ID from .env)
     * @param string|null $token The Telegram bot token (defaults to token from .env)
     * @param string $type The type of notification (for tracking)
     * @param int|null $relatedId Related entity ID (appointment, etc.)
     * @return bool Whether the message was sent successfully
     */
    public static function sendMessage(
        string $message, 
        ?string $chatId = null, 
        ?string $token = null,
        string $type = 'general',
        ?int $relatedId = null
    ): bool
    {
        try {
            // Get token and chat ID, with fallbacks to .env
            $token = $token ?? env('TELEGRAM_BOT_TOKEN');
            $chatId = $chatId ?? env('TELEGRAM_ADMIN_CHAT_ID');

            // If no token or chat ID, don't attempt to send
            if (!$token || !$chatId) {
                Log::warning('Telegram notification not sent: Missing token or chat ID');
                return false;
            }

            // Send the message using the Telegram Bot API
            $response = Http::post("https://api.telegram.org/bot{$token}/sendMessage", [
                'chat_id' => $chatId,
                'text' => $message,
                'parse_mode' => 'HTML',
            ]);

            // Create a record of the notification in the database (if the model exists)
           

            // Check if the message was sent successfully
            if ($response->successful() && $response->json('ok')) {
                return true;
            }

            // Log error if the message wasn't sent
            Log::error('Failed to send Telegram notification', [
                'status' => $response->status(),
                'response' => $response->json(),
            ]);

            return false;
        } catch (\Exception $e) {
            Log::error('Exception when sending Telegram notification: ' . $e->getMessage());
            
            // Create a record of the failed notification in the database (if the model exists)
          
            return false;
        }
    }

    /**
     * Send a notification about a new appointment to admins.
     *
     * @param \App\Models\Appointment $appointment
     * @return bool
     */
    public static function notifyAdminNewAppointment($appointment): bool
    {
        $message = "<b>ЁЯЖХ р╕бр╕╡р╕Бр╕▓р╕гр╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕вр╣Гр╕лр╕бр╣И</b>\n\n" .
            "ЁЯПе <b>р╕Др╕ер╕┤р╕Щр╕┤р╕Б:</b> {$appointment->clinic->name}\n" .
            "ЁЯСитАНтЪХя╕П <b>р╣Бр╕Юр╕Чр╕вр╣М:</b> {$appointment->doctor->name}\n" .
            "ЁЯУЕ <b>р╕зр╕▒р╕Щр╕Чр╕╡р╣И:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->date)->thaidate() . "\n" .
            "тП░ <b>р╣Ар╕зр╕ер╕▓:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->start_time)->format('H:i') . " - " . 
            \Carbon\Carbon::parse($appointment->timeSlot->end_time)->format('H:i') . " р╕Щ.\n" .
            "ЁЯСд <b>р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в:</b> {$appointment->patient_pname} {$appointment->patient_fname} {$appointment->patient_lname}\n" .
            "ЁЯУЭ <b>р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:</b> " . ($appointment->notes ?: '-') . "\n\n" .
            "ЁЯФЧ <a href='" . route('appointments.show', $appointment) . "'>р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б</a>";

        return self::sendMessage(
            $message, 
            null, 
            null, 
            'new_appointment', 
            $appointment->id
        );
    }

    /**
     * Send a notification to a user when their appointment status is updated.
     *
     * @param \App\Models\Appointment $appointment
     * @param string $oldStatus
     * @param string $newStatus
     * @return bool
     */
    public static function notifyUserStatusUpdate($appointment, $oldStatus, $newStatus): bool
    {
        // Don't send notification if user doesn't have telegram_chat_id
        if (!$appointment->user->telegram_chat_id) {
            return false;
        }

        // Format status for display
        $statusLabels = [
            'pending' => 'тП│ р╕гр╕нр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г',
            'confirmed' => 'тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╣Бр╕ер╣Йр╕з',
            'cancelled' => 'тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╣Бр╕ер╣Йр╕з',
            'completed' => 'ЁЯПБ р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ',
        ];

        $message = "<b>ЁЯФД р╕бр╕╡р╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕в</b>\n\n" .
            "ЁЯПе <b>р╕Др╕ер╕┤р╕Щр╕┤р╕Б:</b> {$appointment->clinic->name}\n" .
            "ЁЯСитАНтЪХя╕П <b>р╣Бр╕Юр╕Чр╕вр╣М:</b> {$appointment->doctor->name}\n" .
            "ЁЯУЕ <b>р╕зр╕▒р╕Щр╕Чр╕╡р╣И:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->date)->thaidate() . "\n" .
            "тП░ <b>р╣Ар╕зр╕ер╕▓:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->start_time)->format('H:i') . " - " . 
            \Carbon\Carbon::parse($appointment->timeSlot->end_time)->format('H:i') . " р╕Щ.\n\n" .
            "ЁЯУК <b>р╕кр╕Цр╕▓р╕Щр╕░р╣Ар╕Фр╕┤р╕б:</b> " . ($statusLabels[$oldStatus] ?? $oldStatus) . "\n" .
            "ЁЯУК <b>р╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣И:</b> " . ($statusLabels[$newStatus] ?? $newStatus) . "\n\n" .
            "ЁЯФЧ <a href='" . route('appointments.show', $appointment) . "'>р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б</a>";

        return self::sendMessage(
            $message, 
            $appointment->user->telegram_chat_id, 
            null, 
            'status_update', 
            $appointment->id
        );
    }

    /**
     * Send a reminder for upcoming appointments.
     *
     * @param \App\Models\Appointment $appointment
     * @param int $hoursBeforeAppointment
     * @return bool
     */
    public static function sendAppointmentReminder($appointment, $hoursBeforeAppointment = 24): bool
    {
        // Don't send notification if user doesn't have telegram_chat_id
        if (!$appointment->user->telegram_chat_id) {
            return false;
        }

        $message = "<b>тП░ р╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕вр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╕Ир╕░р╕бр╕▓р╕Цр╕╢р╕З</b>\n\n" .
            "р╣Ар╕гр╕╡р╕вр╕Щ р╕Др╕╕р╕У{$appointment->patient_fname} {$appointment->patient_lname}\n\n" .
            "р╣Ар╕гр╕▓р╕Вр╕нр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕бр╕╡р╕Бр╕▓р╕гр╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕вр╣Гр╕Щр╕нр╕╡р╕Б {$hoursBeforeAppointment} р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З р╕Хр╕▓р╕бр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Фр╕▒р╕Зр╕Щр╕╡р╣Й:\n\n" .
            "ЁЯПе <b>р╕Др╕ер╕┤р╕Щр╕┤р╕Б:</b> {$appointment->clinic->name}\n" .
            "ЁЯСитАНтЪХя╕П <b>р╣Бр╕Юр╕Чр╕вр╣М:</b> {$appointment->doctor->name}\n" .
            "ЁЯУЕ <b>р╕зр╕▒р╕Щр╕Чр╕╡р╣И:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->date)->thaidate() . "\n" .
            "тП░ <b>р╣Ар╕зр╕ер╕▓:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->start_time)->format('H:i') . " - " . 
            \Carbon\Carbon::parse($appointment->timeSlot->end_time)->format('H:i') . " р╕Щ.\n\n" .
            "р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Ър╕▒р╕Хр╕гр╕Ыр╕гр╕░р╕Кр╕▓р╕Кр╕Щр╣Бр╕ер╕░р╕бр╕▓р╕Цр╕╢р╕Зр╕Бр╣Ир╕нр╕Щр╣Ар╕зр╕ер╕▓р╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕вр╕Ыр╕гр╕░р╕бр╕▓р╕У 30 р╕Щр╕▓р╕Чр╕╡ р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Хр╕гр╕╡р╕вр╕бр╣Ар╕нр╕Бр╕кр╕▓р╕гр╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣М\n\n" .
            "р╕лр╕▓р╕Бр╕бр╕╡р╕Вр╣Йр╕нр╕кр╕Зр╕кр╕▒р╕вр╕лр╕гр╕╖р╕нр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Щр╕▒р╕Ф р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╣Ир╕н 042-261135-6\n\n" .
            "ЁЯФЧ <a href='" . route('appointments.show', $appointment) . "'>р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б</a>";

        return self::sendMessage(
            $message, 
            $appointment->user->telegram_chat_id, 
            null, 
            'reminder', 
            $appointment->id
        );
    }

    /**
     * Send notification when an appointment is created.
     *
     * @param \App\Models\Appointment $appointment
     * @return bool
     */
    public static function notifyUserAppointmentCreated($appointment): bool
    {
        // Don't send notification if user doesn't have telegram_chat_id
        if (!$appointment->user->telegram_chat_id) {
            return false;
        }

        $message = "<b>тЬЕ р╕Бр╕▓р╕гр╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕вр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Бр╕ер╣Йр╕з</b>\n\n" .
            "ЁЯПе <b>р╕Др╕ер╕┤р╕Щр╕┤р╕Б:</b> {$appointment->clinic->name}\n" .
            "ЁЯСитАНтЪХя╕П <b>р╣Бр╕Юр╕Чр╕вр╣М:</b> {$appointment->doctor->name}\n" .
            "ЁЯУЕ <b>р╕зр╕▒р╕Щр╕Чр╕╡р╣И:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->date)->thaidate() . "\n" .
            "тП░ <b>р╣Ар╕зр╕ер╕▓:</b> " . \Carbon\Carbon::parse($appointment->timeSlot->start_time)->format('H:i') . " - " . 
            \Carbon\Carbon::parse($appointment->timeSlot->end_time)->format('H:i') . " р╕Щ.\n" .
            "ЁЯСд <b>р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в:</b> {$appointment->patient_pname} {$appointment->patient_fname} {$appointment->patient_lname}\n" .
            "ЁЯУЭ <b>р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:</b> " . ($appointment->notes ?: '-') . "\n\n" .
            "р╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ: <b>тП│ р╕гр╕нр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г</b>\n\n" .
            "р╕Др╕╕р╕Ур╕Ир╕░р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕в\n\n" .
            "ЁЯФЧ <a href='" . route('appointments.show', $appointment) . "'>р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б</a>\n\n" .
            "ЁЯЦия╕П <a href='" . route('appointments.print', $appointment) . "'>р╕Юр╕┤р╕бр╕Юр╣Мр╣Гр╕Ър╕Щр╕▒р╕Ф</a>";

        return self::sendMessage(
            $message, 
            $appointment->user->telegram_chat_id, 
            null, 
            'appointment_created', 
            $appointment->id
        );
    }
}